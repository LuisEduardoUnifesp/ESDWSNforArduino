//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/WSDFN/WSDFNPack.msg.
//

#ifndef _WSDFNPACK_M_H_
#define _WSDFNPACK_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "RoutingPacket_m.h"
// }}

/**
 * Enum generated from <tt>src/node/communication/routing/WSDFN/WSDFNPack.msg:19</tt> by nedtool.
 * <pre>
 * enum WSDFBPackDef
 * {
 * 
 *     DATA = 1;
 *     CONTROLLER_DISCOVERY = 2;
 *     RECOVERY_ROUTER = 3;
 *     REPORT = 4;
 *     PROGRAMMING = 5;
 *     ACTION_TABLE_PACKET = 6;
 *     FLOW_TABLE_PACKET = 7;
 *     TIMER_TABLE_PACKET = 8;
 *     REPORT_NEIGHBORHOOD_PACKET = 9;
 *     SENSOR_TABLE_PACKET = 10;
 *     PROGRAMMING_CONFIRMATION = 11;
 *     REPORT_CONFIRMATION = 12;
 * }
 * </pre>
 */
enum WSDFBPackDef {
    DATA = 1,
    CONTROLLER_DISCOVERY = 2,
    RECOVERY_ROUTER = 3,
    REPORT = 4,
    PROGRAMMING = 5,
    ACTION_TABLE_PACKET = 6,
    FLOW_TABLE_PACKET = 7,
    TIMER_TABLE_PACKET = 8,
    REPORT_NEIGHBORHOOD_PACKET = 9,
    SENSOR_TABLE_PACKET = 10,
    PROGRAMMING_CONFIRMATION = 11,
    REPORT_CONFIRMATION = 12
};

/**
 * Class generated from <tt>src/node/communication/routing/WSDFN/WSDFNPack.msg:34</tt> by nedtool.
 * <pre>
 * packet WSDFNPack extends RoutingPacket
 * {
 *     int WSDFNPackKind @enum(WSDFBPackDef);	// 1 byte
 *     int TTL;		//Time to live 3 bits
 *     int level;		//Hop level
 *     char userData[30];
 * }
 * </pre>
 */
class WSDFNPack : public ::RoutingPacket
{
  protected:
    int WSDFNPackKind_var;
    int TTL_var;
    int level_var;
    char userData_var[30];

  private:
    void copy(const WSDFNPack& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WSDFNPack&);

  public:
    WSDFNPack(const char *name=NULL, int kind=0);
    WSDFNPack(const WSDFNPack& other);
    virtual ~WSDFNPack();
    WSDFNPack& operator=(const WSDFNPack& other);
    virtual WSDFNPack *dup() const {return new WSDFNPack(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getWSDFNPackKind() const;
    virtual void setWSDFNPackKind(int WSDFNPackKind);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual int getLevel() const;
    virtual void setLevel(int level);
    virtual unsigned int getUserDataArraySize() const;
    virtual char getUserData(unsigned int k) const;
    virtual void setUserData(unsigned int k, char userData);
};

inline void doPacking(cCommBuffer *b, WSDFNPack& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WSDFNPack& obj) {obj.parsimUnpack(b);}


#endif // ifndef _WSDFNPACK_M_H_

